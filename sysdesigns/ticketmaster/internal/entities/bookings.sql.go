// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bookings.sql

package entities

import (
	"context"

	"github.com/google/uuid"
)

const bookTicket = `-- name: BookTicket :exec
WITH updated_ticket AS (
    UPDATE tickets
    SET available_tickets = available_tickets - $3
    WHERE id = $1 AND available_tickets >= $3
    RETURNING id
)
INSERT INTO bookings (user_id, ticket_id, quantity, total_price, status)
SELECT $2, $1, $3, $4, 'pending'
FROM updated_ticket
`

type BookTicketParams struct {
	TicketID   uuid.UUID  `json:"ticket_id"`
	UserID     *uuid.UUID `json:"user_id"`
	Quantity   int32      `json:"quantity"`
	TotalPrice float64    `json:"total_price"`
}

func (q *Queries) BookTicket(ctx context.Context, arg BookTicketParams) error {
	_, err := q.db.Exec(ctx, bookTicket,
		arg.TicketID,
		arg.UserID,
		arg.Quantity,
		arg.TotalPrice,
	)
	return err
}

const cancelBooking = `-- name: CancelBooking :exec
WITH updated_booking AS (
    UPDATE bookings
    SET status = 'canceled'
    WHERE bookings.id = $1 AND status != 'canceled'
    RETURNING ticket_id, quantity
)
UPDATE tickets
SET available_tickets = tickets.available_tickets + updated_booking.quantity
FROM updated_booking
WHERE tickets.id = updated_booking.ticket_id
`

func (q *Queries) CancelBooking(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, cancelBooking, id)
	return err
}

const confirmBooking = `-- name: ConfirmBooking :exec
UPDATE bookings
SET status = 'confirmed'
WHERE id = $1 AND status = 'pending'
`

func (q *Queries) ConfirmBooking(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, confirmBooking, id)
	return err
}

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (user_id, ticket_id, quantity, total_price, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, ticket_id, quantity, total_price, status, created_at
`

type CreateBookingParams struct {
	UserID     *uuid.UUID `json:"user_id"`
	TicketID   uuid.UUID  `json:"ticket_id"`
	Quantity   int32      `json:"quantity"`
	TotalPrice float64    `json:"total_price"`
	Status     string     `json:"status"`
}

// @optional user_id
func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.UserID,
		arg.TicketID,
		arg.Quantity,
		arg.TotalPrice,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Quantity,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getBookingStatus = `-- name: GetBookingStatus :one
SELECT status
FROM bookings
WHERE id = $1
`

func (q *Queries) GetBookingStatus(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getBookingStatus, id)
	var status string
	err := row.Scan(&status)
	return status, err
}

const getUserBookings = `-- name: GetUserBookings :many
SELECT id, user_id, ticket_id, quantity, total_price, status, created_at FROM bookings WHERE user_id = $1
`

func (q *Queries) GetUserBookings(ctx context.Context, userID *uuid.UUID) ([]Booking, error) {
	rows, err := q.db.Query(ctx, getUserBookings, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TicketID,
			&i.Quantity,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
