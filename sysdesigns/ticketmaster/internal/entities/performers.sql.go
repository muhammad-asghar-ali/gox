// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: performers.sql

package entities

import (
	"context"
)

const addPerformer = `-- name: AddPerformer :one
INSERT INTO performers (name, genre, bio)
VALUES ($1, $2, $3)
RETURNING id, name, genre, bio, created_at
`

type AddPerformerParams struct {
	Name  string `json:"name"`
	Genre string `json:"genre"`
	Bio   string `json:"bio"`
}

func (q *Queries) AddPerformer(ctx context.Context, arg AddPerformerParams) (Performer, error) {
	row := q.db.QueryRow(ctx, addPerformer, arg.Name, arg.Genre, arg.Bio)
	var i Performer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Genre,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const listPerformer = `-- name: ListPerformer :many
SELECT id, name, genre, bio, created_at FROM performers
`

func (q *Queries) ListPerformer(ctx context.Context) ([]Performer, error) {
	rows, err := q.db.Query(ctx, listPerformer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Performer
	for rows.Next() {
		var i Performer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Genre,
			&i.Bio,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
